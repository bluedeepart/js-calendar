/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/app.js":
/*!***********************!*\
  !*** ./src/js/app.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _deepart_calender_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./deepart-calender.js */ \"./src/js/deepart-calender.js\");\n\r\n\r\n\r\n\r\nwindow.addEventListener(\"DOMContentLoaded\", function () {\r\n  const calender = new _deepart_calender_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\r\n  calender.init(\"calender\", \"events\");\r\n});\r\n\n\n//# sourceURL=webpack://js-calendar/./src/js/app.js?");

/***/ }),

/***/ "./src/js/deepart-calender.js":
/*!************************************!*\
  !*** ./src/js/deepart-calender.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Calender)\n/* harmony export */ });\nconst days = [\r\n  \"Sunday\",\r\n  \"Monday\",\r\n  \"Tuesday\",\r\n  \"Wednesday\",\r\n  \"Thursday\",\r\n  \"Friday\",\r\n  \"Saturday\",\r\n];\r\n\r\nconst months = [\r\n  \"January\",\r\n  \"February\",\r\n  \"March\",\r\n  \"April\",\r\n  \"May\",\r\n  \"June\",\r\n  \"July\",\r\n  \"August\",\r\n  \"September\",\r\n  \"October\",\r\n  \"November\",\r\n  \"December\",\r\n];\r\n\r\nclass StClass {\r\n  static startDate(y, m) {\r\n    return new Date(y, m, 1);\r\n  }\r\n\r\n  static endDate(y, m) {\r\n    return new Date(y, m + 1, 0);\r\n  }\r\n\r\n  static dayWordLimit() {\r\n    let dayWorldLimit;\r\n    dayWorldLimit = 1;\r\n    if (window.screen.width >= 768) {\r\n      dayWorldLimit = 3;\r\n    }\r\n    return dayWorldLimit;\r\n  }\r\n\r\n  static createNode(root, tag, ...cssClass) {\r\n    const tagName = document.createElement(tag);\r\n    cssClass = cssClass.join(\" \");\r\n    tagName.className = cssClass;\r\n    root.appendChild(tagName);\r\n    return tagName;\r\n  }\r\n\r\n  static checkInputValue = (y, m, d) => {\r\n    return (y, m, d) ? new Date(y, m, d) : new Date();\r\n  };\r\n}\r\n\r\nclass Calender {\r\n  constructor() {\r\n    this.d = new Date();\r\n    this.curYear = this.d.getFullYear();\r\n    this.curMonth = this.d.getMonth();\r\n    this.curDate = this.d.getDate();\r\n\r\n    this.cY = this.d.getFullYear();\r\n    this.cM = this.d.getMonth();\r\n\r\n    this.today = StClass.checkInputValue(\r\n      this.gsCurrentYear,\r\n      this.gsCurrentMonth,\r\n      this.curDate\r\n    );\r\n    this.year = this.today.getFullYear();\r\n    this.month = this.today.getMonth();\r\n    this.day = this.today.getDay();\r\n    this.date = this.today.getDate();\r\n    this.startDate = StClass.startDate(this.year, this.month);\r\n    this.endDate = StClass.endDate(this.year, this.month);\r\n    this.prevEndDate = StClass.endDate(this.year, this.month - 1);\r\n    this.nextStartDate = StClass.startDate(this.year, this.month + 1);\r\n\r\n    this.dayWordLimit = StClass.dayWordLimit();\r\n    this.updateDate(this.gsCurrentYear, this.gsCurrentMonth);\r\n  }\r\n\r\n  get gsCurrentMonth() {\r\n    return this.curMonth;\r\n  }\r\n  get gsCurrentYear() {\r\n    return this.curYear;\r\n  }\r\n\r\n  /* getter setter for next month */\r\n  set gsNextMonth(prevMonth) {\r\n    this.curMonth = prevMonth;\r\n  }\r\n\r\n  get gsNextMonth() {\r\n    return this.curMonth++;\r\n  }\r\n\r\n  set gsNextYear(prevYear) {\r\n    this.curYear = prevYear;\r\n  }\r\n\r\n  get gsNextYear() {\r\n    return this.curYear++;\r\n  }\r\n\r\n  /* getter setter for previus month */\r\n  set gsPrevMonth(nextMonth) {\r\n    this.curMonth = nextMonth;\r\n  }\r\n\r\n  get gsPrevMonth() {\r\n    return this.curMonth--;\r\n  }\r\n\r\n  set gsPrevYear(nextYear) {\r\n    this.curYear = nextYear;\r\n  }\r\n\r\n  get gsPrevYear() {\r\n    return this.curYear--;\r\n  }\r\n\r\n  showPrevMonth() {\r\n    if (this.gsPrevMonth === 0) {\r\n      this.gsPrevMonth = months.length - 1;\r\n      this.gsPrevYear;\r\n    }\r\n    this.gsPrevMonth = this.gsCurrentMonth;\r\n    this.updateMonthAndYear(this.gsCurrentYear, this.gsCurrentMonth);\r\n    this.updateDate(this.gsCurrentYear, this.gsCurrentMonth);\r\n    this.addHoliday();\r\n  }\r\n\r\n  showNextMonth() {\r\n    if (this.gsNextMonth >= months.length - 1) {\r\n      this.gsNextMonth = 0;\r\n      this.gsNextYear;\r\n    }\r\n    this.gsNextMonth = this.gsCurrentMonth;\r\n    this.updateMonthAndYear(this.gsCurrentYear, this.gsCurrentMonth);\r\n    this.updateDate(this.gsCurrentYear, this.gsCurrentMonth);\r\n    this.addHoliday();\r\n  }\r\n\r\n  updateMonthAndYear(y = null, m = null) {\r\n    const monthYear = document.querySelector(\".month-and-year\");\r\n    const heading = monthYear.querySelector(\"h4\");\r\n    heading.innerHTML = `${months[m]} ${y}`;\r\n    const dayListItem = document.querySelectorAll(\".day-list-item\");\r\n\r\n    const headYear = heading.textContent.split(\" \").join(\"\").indexOf(this.cY);\r\n    const headMonth = heading.textContent\r\n      .split(\" \")\r\n      .join(\"\")\r\n      .indexOf(months[this.cM]);\r\n\r\n    if (headYear !== -1 && headMonth !== -1) {\r\n      dayListItem.forEach((d, index) => {\r\n        if (index === this.day) {\r\n          d.classList.add(\"active\");\r\n        }\r\n      });\r\n    } else {\r\n      dayListItem.forEach((d) => {\r\n        d.classList.remove(\"active\");\r\n      });\r\n    }\r\n  }\r\n\r\n  updateDate(year, month) {\r\n    const dateList = document.querySelector(\".date-list\");\r\n\r\n    const startDate = StClass.startDate(year, month);\r\n    const endDate = StClass.endDate(year, month);\r\n    const prevEnd = StClass.endDate(year, month - 1);\r\n    const nextStart = StClass.startDate(year, month + 1);\r\n\r\n    let firstDay = startDate.getDay();\r\n    let lastDay = days.length - endDate.getDay();\r\n    let lastDate = endDate.getDate();\r\n    let prevEndDate = prevEnd.getDate();\r\n    let nextStartDate = nextStart.getDate();\r\n\r\n    if (dateList) {\r\n      dateList.innerHTML = \"\";\r\n      for (let prev = prevEndDate - firstDay + 1; prev <= prevEndDate; prev++) {\r\n        const dateListItem = StClass.createNode(\r\n          dateList,\r\n          \"li\",\r\n          \"date-list-item\",\r\n          \"prev-month\"\r\n        );\r\n        dateListItem.innerHTML = `<span>${prev}</span>`;\r\n      }\r\n\r\n      for (let i = 1; i <= lastDate; i++) {\r\n        const monthYear = document.querySelector(\".month-and-year\");\r\n        const heading = monthYear.querySelector(\"h4\");\r\n        const headYear = heading.textContent.indexOf(this.cY);\r\n        const headMonth = heading.textContent.indexOf(months[this.cM]);\r\n\r\n        const dateListItem = StClass.createNode(\r\n          dateList,\r\n          \"li\",\r\n          \"date-list-item\"\r\n        );\r\n        dateListItem.innerHTML = `<span>${i}</span>`;\r\n        if (headYear !== -1 && headMonth !== -1) {\r\n          if (parseInt(dateListItem.textContent) === this.curDate) {\r\n            dateListItem.classList.add(\"active\");\r\n          }\r\n        }\r\n      }\r\n\r\n      for (let next = nextStartDate; next < lastDay; next++) {\r\n        const dateListItem = StClass.createNode(\r\n          dateList,\r\n          \"li\",\r\n          \"date-list-item\",\r\n          \"next-month\"\r\n        );\r\n        dateListItem.innerHTML = `<span>${next}</span>`;\r\n      }\r\n    }\r\n  }\r\n\r\n  addHoliday() {\r\n    const dayListItem = document.querySelectorAll(\".day-list-item\");\r\n    const dateListItem = document.querySelectorAll(\".date-list-item\");\r\n\r\n    dayListItem.forEach((d, i, dy) => {\r\n      dy[0].classList.add(\"holiday\");\r\n      dy[days.length - 1].classList.add(\"holiday\");\r\n    });\r\n\r\n    dateListItem.forEach((d, i, dt) => {\r\n      dt[0].classList.add(\"holiday\");\r\n      for (let j = 0; j < dateListItem.length; j = j + days.length) {\r\n        dt[j].classList.add(\"holiday\");\r\n      }\r\n      for (\r\n        let j = days.length - 1;\r\n        j < dateListItem.length;\r\n        j = j + days.length\r\n      ) {\r\n        dt[j].classList.add(\"holiday\");\r\n      }\r\n    });\r\n  }\r\n\r\n  init(root, eventRoot) {\r\n    // console.log(\r\n    //   `${this.day} ${this.date}-${this.gsCurrentMonth}-${this.gsCurrentYear}`\r\n    // );\r\n    const ui = new UI(root);\r\n    ui.createMonthAndYear();\r\n    ui.createDays();\r\n    ui.createDate();\r\n\r\n    const eventsUI = new EventsUI(eventRoot);\r\n    eventsUI.createPopup();\r\n    eventsUI.previewDate();\r\n    eventsUI.showAllEvents();\r\n\r\n    this.updateMonthAndYear(this.gsCurrentYear, this.gsCurrentMonth);\r\n    this.addHoliday();\r\n  }\r\n}\r\n\r\nclass UI extends Calender {\r\n  constructor(root) {\r\n    super();\r\n    this.rootNode = document.getElementById(root);\r\n  }\r\n\r\n  createMonthAndYear() {\r\n    const monthYear = StClass.createNode(\r\n      this.rootNode,\r\n      \"div\",\r\n      \"month-and-year\"\r\n    );\r\n    monthYear.innerHTML = `\r\n      <button class=\"cal-nav cal-nav-prev\">&lt;</button>\r\n      <h4>${months[this.gsCurrentMonth]} ${this.gsCurrentYear}</h4>\r\n      <button class=\"cal-nav cal-nav-next\">&gt;</button>\r\n    `;\r\n    const calNavPrev = monthYear.querySelector(\".cal-nav-prev\");\r\n    const calNavNext = monthYear.querySelector(\".cal-nav-next\");\r\n    calNavPrev.addEventListener(\"click\", this.showPrevMonth.bind(this));\r\n    calNavNext.addEventListener(\"click\", this.showNextMonth.bind(this));\r\n  }\r\n\r\n  createDays() {\r\n    const dayList = StClass.createNode(this.rootNode, \"ul\", \"day-list\");\r\n    dayList.id = \"day_list\";\r\n\r\n    days.map((day, index) => {\r\n      const d = day.slice(0, this.dayWordLimit);\r\n      const dayListItem = StClass.createNode(dayList, \"li\", \"day-list-item\");\r\n      dayListItem.dataset.day = d;\r\n      dayListItem.textContent = d;\r\n    });\r\n  }\r\n\r\n  createDate() {\r\n    const dateList = StClass.createNode(this.rootNode, \"ul\", \"date-list\");\r\n    dateList.id = \"date_list\";\r\n    this.updateDate(this.gsCurrentYear, this.gsCurrentMonth);\r\n  }\r\n}\r\n\r\nclass Event {\r\n  constructor(title, date) {\r\n    this.title = title;\r\n    this.date = date;\r\n  }\r\n}\r\n\r\nclass Events {\r\n  constructor() {\r\n    this.curDate = new Date().getDate();\r\n    this.curMonth = new Date().getMonth();\r\n    this.root = document.querySelector(\"body\");\r\n    this.events = LocalSt.getEventsFromLocalSt();\r\n    // this.events = [];\r\n  }\r\n\r\n  get gsNewEventAdd() {\r\n    return this.events;\r\n  }\r\n\r\n  set gsRemoveEvent(parentEl) {\r\n    const id = parentEl.id;\r\n    return this.gsRemoveEvent.splice(id, 1);\r\n  }\r\n\r\n  get gsRemoveEvent() {\r\n    return this.gsNewEventAdd;\r\n  }\r\n\r\n  addEventHandler(e) {\r\n    e.preventDefault();\r\n    let evTitle = document.getElementById(\"event_title\").value;\r\n    let evDate = document.getElementById(\"event_date\").value;\r\n    const eventList = document.querySelector(\".event-list\");\r\n\r\n    if (evTitle.trim() !== \"\" && evDate.trim() !== \"\") {\r\n      const newEv = new Event(evTitle, evDate);\r\n      this.gsNewEventAdd.push(newEv);\r\n      LocalSt.addEventsFromLocalSt(newEv);\r\n      this.togglePopup();\r\n      this.checkEventList(eventList);\r\n    }\r\n  }\r\n\r\n  removeEventHandler(e) {\r\n    const eventList = document.querySelector(\".event-list\");\r\n    const btn = e.target;\r\n    const parentEl = btn.parentElement;\r\n    this.gsRemoveEvent = parentEl;\r\n    LocalSt.removeEventsFromLocalSt(parentEl.id);\r\n    parentEl.remove();\r\n    this.checkEventList(eventList);\r\n  }\r\n\r\n  checkEventList(eventList) {\r\n    if (this.gsCheckEventLength === 0) {\r\n      this.noEventMessage(eventList);\r\n    } else {\r\n      this.gsUpdateAllEvents = eventList;\r\n    }\r\n  }\r\n\r\n  get gsCheckEventLength() {\r\n    return this.gsNewEventAdd.length;\r\n  }\r\n\r\n  noEventMessage(eventList) {\r\n    const noEvent = StClass.createNode(eventList, \"li\", \"no-event\");\r\n    noEvent.innerHTML = `<li>No Event Added.</li>`;\r\n    return noEvent;\r\n  }\r\n\r\n  set gsUpdateAllEvents(eventList) {\r\n    if (this.gsCheckEventLength === 0) {\r\n      this.noEventMessage(eventList);\r\n    } else {\r\n      eventList.innerHTML = \"\";\r\n      this.gsNewEventAdd.map((event, index) => {\r\n        this.createEventListItem(eventList, event, index);\r\n      });\r\n    }\r\n  }\r\n\r\n  createEventListItem(eventList, event, index) {\r\n    const d = new Date(event.date).getDate();\r\n    const m = months[new Date(event.date).getMonth()].slice(0, 3);\r\n    const evDate = `${d} ${m}`;\r\n\r\n    const eventListItem = StClass.createNode(\r\n      eventList,\r\n      \"li\",\r\n      \"event-list-item\"\r\n    );\r\n    eventListItem.id = index;\r\n    eventListItem.innerHTML = `\r\n    <div class=\"event-title\">${event.title}</div>\r\n    <div class=\"event-des\">${evDate} </div>\r\n    <div class=\"cancel\">&times;</div>\r\n    `;\r\n    eventListItem\r\n      .querySelector(\".cancel\")\r\n      .addEventListener(\"click\", this.removeEventHandler.bind(this));\r\n  }\r\n\r\n  createPopup() {\r\n    const addEventWrapper = StClass.createNode(\r\n      this.root,\r\n      \"div\",\r\n      \"add-event-wrapper\"\r\n    );\r\n    const overlay = StClass.createNode(this.root, \"div\", \"overlay\");\r\n    const addEventForm = StClass.createNode(\r\n      addEventWrapper,\r\n      // \"form\",\r\n      \"div\",\r\n      \"add-event-form\"\r\n    );\r\n    // addEventForm.setAttribute(\"method\", \"POST\");\r\n    const popupHeader = StClass.createNode(\r\n      addEventForm,\r\n      \"div\",\r\n      \"add-event-header\"\r\n    );\r\n    const popupbody = StClass.createNode(addEventForm, \"div\", \"add-event-body\");\r\n    const popupFooter = StClass.createNode(\r\n      addEventForm,\r\n      \"div\",\r\n      \"add-event-footer\"\r\n    );\r\n    const popupTitle = StClass.createNode(popupHeader, \"h3\", \"add-event-title\");\r\n    const closeBtn = StClass.createNode(popupHeader, \"div\", \"cancel\");\r\n    const formGroup1 = StClass.createNode(popupbody, \"div\", \"form-group\");\r\n    const formGroup2 = StClass.createNode(popupbody, \"div\", \"form-group\");\r\n    const label1 = StClass.createNode(formGroup1, \"label\", \"form-label\");\r\n    const label2 = StClass.createNode(formGroup2, \"label\", \"form-label\");\r\n    const titleInput = StClass.createNode(formGroup1, \"input\", \"form-control\");\r\n    const dateInput = StClass.createNode(formGroup2, \"input\", \"form-control\");\r\n\r\n    const cancelBtn = StClass.createNode(\r\n      popupFooter,\r\n      \"button\",\r\n      \"btn\",\r\n      \"btn-secondary\"\r\n    );\r\n    const submitBtn = StClass.createNode(\r\n      popupFooter,\r\n      \"button\",\r\n      \"btn\",\r\n      \"btn-info\",\r\n      \"ml-3\"\r\n    );\r\n\r\n    cancelBtn.innerHTML = \"Cancel\";\r\n    submitBtn.innerHTML = \"Add Event\";\r\n    // submitBtn.setAttribute(\"type\", \"submit\");\r\n    popupTitle.innerHTML = \"Add Event\";\r\n    closeBtn.innerHTML = \"&times;\";\r\n    label1.innerHTML = \"Event Title\";\r\n    label2.innerHTML = \"Event Date\";\r\n    titleInput.setAttribute(\"type\", \"text\");\r\n    titleInput.id = \"event_title\";\r\n    dateInput.setAttribute(\"type\", \"date\");\r\n    dateInput.id = \"event_date\";\r\n\r\n    addEventForm.addEventListener(\"submit\", this.addEventHandler.bind(this));\r\n    overlay.addEventListener(\"click\", this.togglePopup.bind(this));\r\n    cancelBtn.addEventListener(\"click\", this.togglePopup.bind(this));\r\n    closeBtn.addEventListener(\"click\", this.togglePopup.bind(this));\r\n    submitBtn.addEventListener(\"click\", this.addEventHandler.bind(this));\r\n\r\n    return addEventWrapper, overlay;\r\n  }\r\n}\r\n\r\nclass EventsUI extends Events {\r\n  constructor(eventRoot) {\r\n    super();\r\n    this.rootNode = document.getElementById(eventRoot);\r\n  }\r\n\r\n  previewDate() {\r\n    const currentDate = StClass.createNode(this.rootNode, \"h2\", \"current-date\");\r\n    currentDate.innerHTML = `${this.curDate} ${months[this.curMonth].slice(\r\n      0,\r\n      3\r\n    )}`;\r\n    return currentDate;\r\n  }\r\n\r\n  showAllEvents() {\r\n    const eventWrapper = StClass.createNode(\r\n      this.rootNode,\r\n      \"div\",\r\n      \"event-wrapper\"\r\n    );\r\n    const eventHeader = StClass.createNode(eventWrapper, \"div\", \"event-header\");\r\n    eventHeader.innerHTML = `\r\n    <h5>All Events</h5>\r\n    <button><span>&plus;</span></button>\r\n    `;\r\n    eventHeader\r\n      .querySelector(\"button\")\r\n      .addEventListener(\"click\", this.togglePopup.bind(this));\r\n    const eventBody = StClass.createNode(eventWrapper, \"div\", \"event-body\");\r\n    const eventList = StClass.createNode(eventBody, \"ul\", \"event-list\");\r\n\r\n    this.gsUpdateAllEvents = eventList;\r\n\r\n    return eventWrapper;\r\n  }\r\n\r\n  togglePopup() {\r\n    const popup = document.querySelector(\".add-event-wrapper\").classList;\r\n    const overlay = document.querySelector(\".overlay\").classList;\r\n    let evTitle = document.getElementById(\"event_title\");\r\n    let evDate = document.getElementById(\"event_date\");\r\n\r\n    if (popup.contains(\"show\") && overlay.contains(\"show\")) {\r\n      popup.remove(\"show\");\r\n      overlay.remove(\"show\");\r\n    } else {\r\n      popup.add(\"show\");\r\n      overlay.add(\"show\");\r\n    }\r\n    evTitle.value = \"\";\r\n    evDate.value = \"\";\r\n  }\r\n}\r\n\r\nclass LocalSt extends Events {\r\n  //get events from local storage\r\n  static getEventsFromLocalSt() {\r\n    let events = \"\";\r\n    if (localStorage.getItem(\"events\") === null) {\r\n      events = [];\r\n    } else {\r\n      events = JSON.parse(localStorage.getItem(\"events\"));\r\n    }\r\n    return events;\r\n  }\r\n\r\n  //set events to local storage\r\n  static addEventsFromLocalSt(ev) {\r\n    const events = LocalSt.getEventsFromLocalSt();\r\n    events.push(ev);\r\n    localStorage.setItem(\"events\", JSON.stringify(events));\r\n  }\r\n\r\n  //remove events from local storage\r\n  static removeEventsFromLocalSt(id) {\r\n    const events = LocalSt.getEventsFromLocalSt();\r\n    console.log(id);\r\n    events.splice(id, 1);\r\n    localStorage.setItem(\"events\", JSON.stringify(events));\r\n  }\r\n}\r\n\n\n//# sourceURL=webpack://js-calendar/./src/js/deepart-calender.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/js/app.js");
/******/ 	
/******/ })()
;